{"version":3,"sources":["logo.svg","components/home.js","components/resume.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","React","Component","Resume","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","data","_this2","fetch","then","res","json","result","setState","_this$state","message","react_router_dom","className","href","to","react_router","exact","path","component","text","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KCMzBC,gMAHX,OAAOC,EAAAC,EAAAC,cAAA,yCAFQC,IAAMC,YCKVC,mLAHX,OAAOL,EAAAC,EAAAC,cAAA,4CAFUC,IAAMC,2BCiFZE,cAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,KAAM,IALSV,mFASC,IAAAW,EAAAR,KAClBS,MAAM,oCACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAACG,GACCL,EAAKM,SAAS,CACZR,UAAU,EACVC,KAAMM,EAAO,MAGjB,SAACR,GACCG,EAAKM,SAAS,CACZR,UAAU,EACVD,6CAKC,IAAAU,EAC2Bf,KAAKI,MAA/BC,EADDU,EACCV,MAAOC,EADRS,EACQT,SAAUC,EADlBQ,EACkBR,KACzB,OAAIF,EACKhB,EAAAC,EAAAC,cAAA,qBAAac,EAAMW,SAChBV,EAIFjB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,cACQF,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,kCACX7B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,0BACX7B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,iBACf7B,EAAAC,EAAAC,cAAA,KAAG2B,UAAU,gBAAb,mBACA7B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,0BACf7B,EAAAC,EAAAC,cAAA,KAAG2B,UAAU,sBAAb,oBACA7B,EAAAC,EAAAC,cAAA,KAAG2B,UAAU,cACT7B,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,oCAAR,gCAIJ9B,EAAAC,EAAAC,cAAA,MAAI2B,UAAU,+BACd7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMG,GAAG,KAAT,SACJ/B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,KAAR,aACJ9B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMG,GAAG,WAAT,eAKpB/B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,kCACb7B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjCC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAW9B,IACnCL,EAAAC,EAAAC,cAAA,SAAIgB,EAAKkB,MACTpC,EAAAC,EAAAC,cAAA,SAAIS,KAAKJ,MAAM8B,UA9BlBrC,EAAAC,EAAAC,cAAA,gCAjCKE,aCIEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAKR,KAAK,YAAcS,SAASC,eAAe,SD0H1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.52a00989.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nclass Home extends React.Component {\r\n  render() {\r\n    return <p>List of skills I have</p>\r\n  }\r\n}\r\nexport default Home","import React from 'react'\r\nclass Resume extends React.Component {\r\n  render() {\r\n    return <p>My Resume In Html Format</p>\r\n  }\r\n}\r\nexport default Resume","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './../src/components/home';\nimport Resume from './../src/components/resume';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: {}\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3005/helloWorld\")\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          isLoaded: true,\n          data: result[0]\n        });\n      },\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n  }\n\n  render() {\n    const { error, isLoaded, data } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n              <div>\n              <Router>\n                <div>\n                <header>\n                        <nav className=\"navbar navbar-default myNavBar\">\n                            <div className=\"container-fluid header\">\n                                <div className=\"navbar-header\">\n                                <p className=\"navbar-brand\">My Study Table </p>\n                                <div className=\"navbar-brand myDetails\">\n                                <p className='text-small myEmail'>Dheeraj Bharsiya</p>\n                                <p className='text-small'>\n                                    <a href=\"mailto:dheerajbharsiya@gmail.com\">dheerajbharsiya@gmail.com</a>\n                                </p>\n                                </div>\n                                </div>\n                                <ul className=\"nav navbar-nav myNavBar-nav\">\n                                <li><Link to=\"/\">Home</Link></li>\n                                <li><a href=\"#\">About Me</a></li>\n                                <li><Link to=\"/resume\">Resume</Link></li>\n                                </ul>\n                            </div>\n                        </nav>\n                </header>\n                <div className='container-fluid main-container' >\n                  <Route exact path=\"/\" component={Home} />\n                  <Route path=\"/resume\" component={Resume} />\n                <p>{data.text}</p>\n                <p>{this.props.name}</p>\n                </div>\n                </div>\n            </Router>\n              </div>\n              \n              );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App name=\"dheeraj\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}